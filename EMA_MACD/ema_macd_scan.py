# -*- coding: utf-8 -*-
"""52wk+EMA_MACD.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yTc3Rs9eNbuZfD0DKa6JcxtupEJO_S7P
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import yfinance as yf
import numpy as np
import datetime as datetime
import matplotlib.pyplot as plt
from datetime import datetime

# NSE 500
nse500 = [
    "360ONE", "3MINDIA", "ABB", "ACC", "AIAENG", "APLAPOLLO", "AUBANK", "AARTIDRUGS", "AARTIIND", "AAVAS",
    "ABBOTINDIA", "ADANIENT", "ADANIGREEN", "ADANIPORTS", "ADANIPOWER", "ATGL", "ADANITRANS", "AWL", "ABCAPITAL",
    "ABFRL","AETHER", "AFFLE", "AJANTPHARM", "APLLTD", "ALKEM", "ALKYLAMINE", "AMARAJABAT", "AMBER",
    "AMBUJACEM", "ANGELONE", "ANURAS", "APARINDS", "APOLLOHOSP", "APOLLOTYRE", "APTUS", "ACI", "ASAHIINDIA", "ASHOKLEY",
    "ASIANPAINT", "ASTERDM", "ASTRAL", "ATUL", "AUROPHARMA", "AVANTIFEED", "DMART", "AXISBANK", "BASF", "BEML", "BLS",
    "BSE", "BAJAJ-AUTO", "BAJFINANCE", "BAJAJFINSV", "BAJAJHLDNG", "BALAMINES", "BALKRISIND", "BALRAMCHIN", "BANDHANBNK",
    "BANKBARODA", "BANKINDIA", "MAHABANK", "BATAINDIA", "BAYERCROP", "BERGEPAINT", "BDL", "BEL", "BHARATFORG", "BHEL",
    "BPCL", "BHARTIARTL", "BIKAJI", "BIOCON", "BIRLACORPN", "BSOFT", "BLUEDART", "BLUESTARCO", "BBTC", "BORORENEW",
    "BOSCHLTD", "BRIGADE", "BCG", "BRITANNIA", "MAPMYINDIA", "CCL", "CESC", "CGPOWER", "CIEINDIA", "CRISIL", "CSBBANK",
    "CAMPUS", "CANFINHOME", "CANBK", "CGCL", "CARBORUNIV", "CASTROLIND", "CEATLTD", "CENTRALBK", "CDSL", "CENTURYPLY",
    "CENTURYTEX", "CERA", "CHALET", "CHAMBLFERT", "CHEMPLASTS", "CHOLAHLDNG", "CHOLAFIN", "CIPLA", "CUB", "CLEAN",
    "COALINDIA", "COCHINSHIP", "COFORGE", "COLPAL", "CAMS", "CONCOR", "COROMANDEL", "CRAFTSMAN", "CREDITACC", "CROMPTON",
    "CUMMINSIND", "CYIENT", "DCMSHRIRAM", "DLF", "DABUR", "DALBHARAT", "DATAPATTNS", "DEEPAKFERT", "DEEPAKNTR", "DELHIVERY",
    "DELTACORP", "DEVYANI", "DIVISLAB", "DIXON", "LALPATHLAB", "DRREDDY", "DUMMYREL", "EIDPARRY", "EIHOTEL", "EPL",
    "EASEMYTRIP", "EICHERMOT", "ELGIEQUIP", "EMAMILTD", "ENDURANCE", "ENGINERSIN", "EQUITASBNK", "ERIS", "ESCORTS",
    "EXIDEIND", "FDC", "NYKAA", "FEDERALBNK", "FACT", "FINEORG", "FINCABLES", "FINPIPE", "FSL", "FIVESTAR", "FORTIS",
    "GRINFRA", "GAIL", "GMMPFAUDLR", "GMRINFRA", "GALAXYSURF", "GARFIBRES", "GICRE", "GLAND", "GLAXO", "GLENMARK",
    "MEDANTA", "GOCOLORS", "GODFRYPHLP", "GODREJAGRO", "GODREJCP", "GODREJIND", "GODREJPROP", "GRANULES", "GRAPHITE",
    "GRASIM", "GESHIP", "GREENPANEL", "GRINDWELL", "GUJALKALI", "GAEL", "FLUOROCHEM", "GUJGASLTD", "GNFC", "GPPL", "GSFC",
    "GSPL", "HEG", "HCLTECH", "HDFCAMC", "HDFCBANK", "HDFCLIFE", "HFCL", "HLEGLAS", "HAPPSTMNDS", "HAVELLS", "HEROMOTOCO",
    "HIKAL", "HINDALCO", "HGS", "HAL", "HINDCOPPER", "HINDPETRO", "HINDUNILVR", "HINDZINC", "POWERINDIA", "HOMEFIRST",
    "HONAUT", "HUDCO", "ICICIBANK", "ICICIGI", "ICICIPRULI", "ISEC", "IDBI", "IDFCFIRSTB", "IDFC", "IFBIND", "IIFL", "IRB",
    "ITC", "ITI", "INDIACEM","IBREALEST", "INDIAMART", "INDIANB", "IEX", "INDHOTEL", "IOC", "IOB", "IRCTC",
    "IRFC", "INDIGOPNTS", "IGL", "INDUSTOWER", "INDUSINDBK", "INFIBEAM", "NAUKRI", "INFY", "INGERRAND", "INTELLECT",
    "INDIGO", "IPCALAB", "JBCHEPHARM", "JKCEMENT", "JBMA", "JKLAKSHMI", "JKPAPER", "JMFINANCIL", "JSWENERGY", "JSWSTEEL",
    "JAMNAAUTO", "JSL", "JINDALSTEL", "JINDWORLD", "JUBLFOOD", "JUBLINGREA", "JUBLPHARMA", "JUSTDIAL", "JYOTHYLAB",
    "KPRMILL", "KEI", "KNRCON", "KPITTECH", "KRBL", "KSB", "KAJARIACER", "KPIL", "KALYANKJIL", "KANSAINER", "KARURVYSYA",
    "KEC", "KENNAMET", "RUSTOMJEE", "KFINTECH", "KOTAKBANK", "KIMS","LTTS", "LICHSGFIN", "LTIM", "LAXMIMACH", "LT",
    "LATENTVIEW", "LAURUSLABS", "LXCHEM", "LEMONTREE", "LICI", "LINDEINDIA", "LUPIN", "LUXIND", "MMTC", "MRF",
    "MTARTECH", "LODHA", "MGL", "M&MFIN", "M&M", "MHRIL", "MAHLIFE", "MAHLOG", "MANAPPURAM", "MRPL", "MANKIND",
    "MARICO", "MARUTI", "MASTEK", "MFSL", "MAXHEALTH", "MAZDOCK", "MEDPLUS", "MFL", "METROBRAND", "METROPOLIS",
    "MSUMI", "MOTILALOFS", "MPHASIS", "MCX", "MUTHOOTFIN", "NATCOPHARM", "NBCC", "NCC", "NHPC", "NLCINDIA", "NMDC",
    "NSLNISP", "NOCIL", "NTPC", "NH", "NATIONALUM", "NAVINFLUOR", "NAZARA", "NESTLEIND", "NETWORK18", "NAM-INDIA",
    "NUVOCO", "OBEROIRLTY", "ONGC", "OIL", "OLECTRA", "PAYTM", "OFSS", "ORIENTELEC", "POLICYBZR", "PCBL", "PIIND",
    "PNBHOUSING", "PNCINFRA", "PVRINOX", "PAGEIND", "PATANJALI", "PERSISTENT", "PETRONET", "PFIZER", "PHOENIXLTD",
    "PIDILITIND", "PEL", "PPLPHARMA", "POLYMED", "POLYCAB", "POLYPLEX", "POONAWALLA", "PFC", "POWERGRID", "PRAJIND",
    "PRESTIGE", "PRINCEPIPE", "PRSMJOHNSN", "PGHH", "PNB", "QUESS", "RBLBANK", "RECLTD", "RHIM", "RITES", "RADICO",
    "RVNL", "RAIN", "RAINBOW", "RAJESHEXPO", "RALLIS", "RCF", "RATNAMANI", "RTNINDIA", "RAYMOND", "REDINGTON", "RELAXO",
    "RELIANCE", "RBA", "ROSSARI", "ROUTE", "SBICARD", "SBILIFE", "SJVN", "SKFINDIA", "SRF", "MOTHERSON", "SANOFI",
    "SAPPHIRE", "SCHAEFFLER", "SHARDACROP", "SHOPERSTOP", "SHREECEM", "RENUKA", "SHRIRAMFIN", "SHYAMMETL", "SIEMENS",
    "SOBHA", "SOLARINDS", "SONACOMS", "SONATSOFTW", "STARHEALTH", "SBIN", "SAIL", "SWSOLAR", "STLTECH", "SUMICHEM",
    "SPARC", "SUNPHARMA", "SUNTV", "SUNDARMFIN", "SUNDRMFAST", "SUNTECK", "SUPRAJIT", "SUPREMEIND", "SUVENPHAR", "SUZLON",
    "SWANENERGY", "SYNGENE", "TCIEXP","TTKPRESTIG", "TV18BRDCST", "TVSMOTOR", "TMB", "TANLA", "TATACHEM",
    "TATACOMM", "TCS", "TATACONSUM", "TATAELXSI", "TATAINVEST", "TATAMTRDVR", "TATAMOTORS", "TATAPOWER", "TATASTEEL",
    "TTML", "TEAMLEASE", "TECHM", "TEJASNET", "NIACL", "RAMCOCEM", "THERMAX", "TIMKEN", "TITAN", "TORNTPHARM", "TORNTPOWER",
    "TCI", "TRENT", "TRIDENT", "TRIVENI", "TRITURBINE", "TIINDIA", "UCOBANK", "UFLEX", "UNOMINDA", "UPL", "UTIAMC",
    "ULTRACEMCO", "UNIONBANK", "UBL","VGUARD", "VMART", "VIPIND", "VAIBHAVGBL", "VTL", "VARROC", "VBL",
    "MANYAVAR", "VEDL", "VIJAYA", "VINATIORGA", "IDEA", "VOLTAS", "WELCORP","WESTLIFE", "WHIRLPOOL",
    "WIPRO", "YESBANK", "ZFCVINDIA", "ZEEL", "ZENSARTECH", "ZOMATO", "ZYDUSLIFE", "ZYDUSWELL", "ECLERX"
]

start_date = "2018-01-01"
end_date = datetime.today().strftime('%Y-%m-%d')  # You can use this for today's date

stock_data = {}

for stock in nse500:
    symbol = stock + ".NS"
    try:
        data = yf.download(symbol, start=start_date, end=end_date)
        stock_data[stock] = data
    except Exception as e:
        print(f"Error downloading data for {stock}: {str(e)}")

print(stock_data)  # This will print the stock data dictionary. You can also save this to a file or process it further.

stocks_above_52_week_high = []

# Extract scalar values from the Series using .iloc[0] to avoid ambiguity
if len(data) >= 252:
    # Get the 52-week high from the Close prices
    high_52_week = data['Close'].iloc[-252:].max()

    # Get the latest closing price
    latest_close = data['Close'].iloc[-1]

    # Convert to scalar values
    high_52_week_value = high_52_week if isinstance(high_52_week, (int, float)) else high_52_week.iloc[0]
    latest_close_value = latest_close if isinstance(latest_close, (int, float)) else latest_close.iloc[0]

    print(f"{stock}: Latest Close = {latest_close_value}, 52-week High = {high_52_week_value}")  # Diagnostic print

    # Compare the latest close price with the 52-week high
    if latest_close_value > high_52_week_value:
        stocks_above_52_week_high.append(stock)

print("\nStocks above their 52-week high:")
print(stocks_above_52_week_high)

stocks_above_52_week_high = []

# Iterate through each stock and its data
for stock, data in stock_data.items():
    # Ensure there is enough data for a 52-week period (roughly 252 trading days)
    if len(data) >= 252:
        # Calculate the 52-week high
        high_52_week = data['Close'].iloc[-252:].max()

        # Get the latest closing price
        latest_close = data['Close'].iloc[-1]

        # Convert both to scalar values if necessary (assume single-element Series)
        if isinstance(high_52_week, pd.Series):
            high_52_week = high_52_week.iloc[0]
        if isinstance(latest_close, pd.Series):
            latest_close = latest_close.iloc[0]

        print(f"{stock}: Latest Close = {latest_close}, 52-week High = {high_52_week}")  # Diagnostic print

        # Compare the latest close price with the 52-week high
        if latest_close > high_52_week:
            stocks_above_52_week_high.append(stock)

print("\nStocks above their 52-week high:")
print(stocks_above_52_week_high)

def compute_technical_indicators(data):
    data['5_EMA'] = data['Close'].ewm(span=5, adjust=False).mean()
    data['8_EMA'] = data['Close'].ewm(span=8, adjust=False).mean()
    data['13_EMA'] = data['Close'].ewm(span=13, adjust=False).mean()
    data['21_EMA'] = data['Close'].ewm(span=21, adjust=False).mean()

    data['macd'] = data['Close'].ewm(span=12, adjust=False).mean() - data['Close'].ewm(span=26, adjust=False).mean()
    data['signal'] = data['macd'].ewm(span=9, adjust=False).mean()

    return data

stocks_with_buy_signal = []

# Iterate through each stock and its data in the dictionary
for stock, data in stock_data.items():
    # Check if the stock has enough data for 52 weeks (roughly 252 trading days)
    if len(data) >= 252:
        # Get the 52-week high from the Close prices
        high_52_week = data['Close'].iloc[-252:].max()

        # Get the latest closing price
        latest_close = data['Close'].iloc[-1]

        # Ensure both are scalar values
        if isinstance(high_52_week, pd.Series):
            high_52_week = high_52_week.iloc[0]
        if isinstance(latest_close, pd.Series):
            latest_close = latest_close.iloc[0]

        # If the latest close is the 52-week high, compute technical indicators and check the buy signal
        if latest_close == high_52_week:
            # Compute the technical indicators
            data = compute_technical_indicators(data)

            # Extract scalar values for comparison to ensure proper alignment
            latest_data = data.iloc[-1]
            close_price = latest_data['Close'].iloc[0] if isinstance(latest_data['Close'], pd.Series) else latest_data['Close']
            ema_5 = latest_data['5_EMA'].iloc[0] if isinstance(latest_data['5_EMA'], pd.Series) else latest_data['5_EMA']
            ema_8 = latest_data['8_EMA'].iloc[0] if isinstance(latest_data['8_EMA'], pd.Series) else latest_data['8_EMA']
            ema_13 = latest_data['13_EMA'].iloc[0] if isinstance(latest_data['13_EMA'], pd.Series) else latest_data['13_EMA']
            ema_21 = latest_data['21_EMA'].iloc[0] if isinstance(latest_data['21_EMA'], pd.Series) else latest_data['21_EMA']
            macd = latest_data['macd'].iloc[0] if isinstance(latest_data['macd'], pd.Series) else latest_data['macd']
            signal = latest_data['signal'].iloc[0] if isinstance(latest_data['signal'], pd.Series) else latest_data['signal']

            if (close_price > ema_5 and
                close_price > ema_8 and
                close_price > ema_13 and
                close_price > ema_21 and
                macd > signal):
                stocks_with_buy_signal.append(stock)

print("Stocks with buy signals:")
print(stocks_with_buy_signal)

import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots

def plot_stock(stock_symbol):
    data = stock_data[stock_symbol]
    if data is not None:
        data = compute_technical_indicators(data)
        plot_data = data.loc[data.index > (data.index[-1] - pd.DateOffset(months=12))]

        # Create a subplot for candlestick chart and volume bar chart
        fig = make_subplots(rows=3, cols=1, shared_xaxes=True,
                            vertical_spacing=0.1, subplot_titles=(f"{stock_symbol} Stock price", "Volume", "MACD"),
                            row_heights=[0.6, 0.1, 0.3])  # Adjust the relative heights of the subplots

        # Plot Candlestick chart
        fig.add_trace(go.Candlestick(x=plot_data.index,
                                     open=plot_data['Open'],
                                     high=plot_data['High'],
                                     low=plot_data['Low'],
                                     close=plot_data['Close'],
                                     name="Price"),
                      row=1, col=1)

        # Add EMA indicators
        fig.add_trace(go.Scatter(x=plot_data.index, y=plot_data['5_EMA'], mode='lines', name="5 EMA"), row=1, col=1)
        fig.add_trace(go.Scatter(x=plot_data.index, y=plot_data['8_EMA'], mode='lines', name="8 EMA"), row=1, col=1)
        fig.add_trace(go.Scatter(x=plot_data.index, y=plot_data['13_EMA'], mode='lines', name="13 EMA"), row=1, col=1)
        fig.add_trace(go.Scatter(x=plot_data.index, y=plot_data['21_EMA'], mode='lines', name="21 EMA"), row=1, col=1)

        # Add volume bar chart
        fig.add_trace(go.Bar(x=plot_data.index, y=plot_data['Volume'], name="Volume"), row=2, col=1)

        # Add MACD
        fig.add_trace(go.Scatter(x=plot_data.index, y=plot_data['macd'], mode='lines', name="MACD"), row=3, col=1)
        fig.add_trace(go.Scatter(x=plot_data.index, y=plot_data['signal'], mode='lines', name="Signal Line"), row=3, col=1)

        # Update the layout and show the plot
        fig.update_layout(title=f"{stock_symbol} Stock Analysis")
        fig.show()

# Loop through each stock in stocks_with_buy_signal and plot
for stock in stocks_with_buy_signal:
    plot_stock(stock)
